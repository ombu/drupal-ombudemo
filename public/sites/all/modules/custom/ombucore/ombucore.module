<?php

/**
 * @file
 *
 * Base Code for use with ombuprofile.
 */

/**
 * Implements hook_menu().
 */
function ombucore_menu() {
  $items = array();

  $items['ombucore_404'] = array(
    'title' => t('Page not found'),
    'access callback' => TRUE,
    'page callback' => 'ombucore_404_page',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function ombucore_block_info() {
  // Define site specific blocks here.
  $blocks = array();
  $blocks['site_logo'] = array(
    'info' => t('Site Logo'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['page_title'] = array(
    'info' => t('Page Title'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['breadcrumb'] = array(
    'info' => t('Breadcrumb'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function ombucore_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'site_logo':
      $block['subject'] = '';
      $block['content'] = array(
        'foo' => array(
          '#markup' => variable_get('site_name', 'Site Name'),
          '#prefix' => '<a href="/" class="brand">',
          '#suffix' => '</a>',
        ),
      );
      break;

    case 'page_title':
      $block['subject'] = '';
      $block['content'] = '';
      // Hide the title on the front page.
      // @todo: make this a setting, or at least more configurable.
      if (!drupal_is_front_page() && !variable_get('ombucore_hide_title', FALSE)) {
        $block['content'] = array(
          'title' => array(
            '#markup' => drupal_get_title(),
            '#prefix' => '<h1>',
            '#suffix' => '</h1>',
          ),
        );
      }
      break;

    case 'breadcrumb':
      $block['subject'] = '';
      $block['content'] = '';
      if ($breadcrumb = drupal_get_breadcrumb()) {
        $block['content'] = array(
          'breadcrumb' => array(
            '#markup' => theme('breadcrumb', array('breadcrumb' => drupal_get_breadcrumb())),
          ),
        );
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_ctools_plugin_api().
 */
function ombucore_ctools_plugin_api($module, $api) {
  if ($module == 'context' && $api == 'plugins') {
    return array('version' => 3);
  }
}

/**
 * Implements hook_context_plugins().
 */
function ombucore_context_plugins() {
  $plugins = array();
  $plugins['context_condition_frontend'] = array(
    'handler' => array(
      'path' => drupal_get_path('module', 'ombucore') . '/plugins',
      'file' => 'context_condition_frontend.inc',
      'class' => 'context_condition_frontend',
      'parent' => 'context_condition',
    ),
  );
  return $plugins;
}

/**
 * Implements of hook_context_registry().
 */
function ombucore_context_registry() {
  $registry = array();

  $registry['conditions'] = array(
    'frontend' => array(
      'title' => t('Front End Theme'),
      'description' => 'This condition triggers on pages themed with theme_default.',
      'plugin' => 'context_condition_frontend',
    ),
  );
  return $registry;
}

/**
 * Implements of hook_context_page_reaction().
 */
function ombucore_context_page_condition() {
  global $theme;
  if ($plugin = context_get_plugin('condition', 'frontend')) {
    $plugin->execute($theme);
  }
}

/**
 * Implements hook_image_effect_info().
 *
 * New image effect to scale/crop with ability to select center point.
 */
function ombucore_image_effect_info() {
  $effects = array(
    'image_scale_and_crop_center' => array(
      'label' => t('Scale and crop - centering'),
      'help' => t('Scale and crop will maintain the aspect-ratio of the original image, then crop the larger dimension with the ability to select center point.'),
      'effect callback' => 'ombucore_image_scale_and_crop_effect',
      'dimensions callback' => 'image_resize_dimensions',
      'form callback' => 'image_crop_form',
      'summary theme' => 'image_resize_summary',
    ),
  );

  return $effects;
}

/**
 * Image effect callback.
 */
function ombucore_image_scale_and_crop_effect(&$image, $data) {
  // Set sane default values.
  $data += array(
    'anchor' => 'center-top',
    'upscale' => TRUE,
  );

  // Figure out the correct aspect ratio to scale image to in order for the
  // cropping to result in a true sized crop. This means that in some cases the
  // height and the width will be greater than the dimensions expected for the
  // crop.
  $image_width = $image->info['width'];
  $image_height = $image->info['height'];
  $width = $data['width'];
  $height = $data['height'];
  if ($image_width >= $image_height) {
    $width_ratio = $height / $image_width;
    $height_ratio = $width / $image_height;
  }
  else {
    $width_ratio = $width / $image_width;
    $height_ratio = $height / $image_height;
  }

  $ratio = max($width_ratio, $height_ratio);
  $width = $image_width * $ratio;
  $height = $image_height * $ratio;

  if (image_resize($image, $width, $height)) {
    list($x, $y) = explode('-', $data['anchor']);
    $x = image_filter_keyword($x, $image->info['width'], $data['width']);
    $y = image_filter_keyword($y, $image->info['height'], $data['height']);

    return image_crop($image, $x, $y, $data['width'], $data['height']);
  }
  return FALSE;
}

/**
 * 404 page callback.
 */
function ombucore_404_page() {
  drupal_set_title(t('Page not found'));
  return t('The requested page could not be found.');
}

/**
 * Instantiates and registers Composer autoloader.
 *
 * @return \Composer\Autoload\ClassLoader
 *   Composer autoloader.
 */
function ombucore_autoload() {
  $loader = require drupal_get_path('module', 'ombucore') . '/vendor/autoload.php';
  return $loader;
}
